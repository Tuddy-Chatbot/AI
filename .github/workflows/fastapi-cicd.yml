name: fastapi-cicd
on:
  push: { branches: [ main ] }
  workflow_dispatch:

permissions: { id-token: write, contents: read }

env:
  AWS_REGION: ap-northeast-2
  ACCOUNT_ID: "471583395947"
  ECR_REPO: tuddy-llm
  EC2_INSTANCE_ID: i-0f519ff0d4ecb5ad9
  ECR_REGISTRY: 471583395947.dkr.ecr.ap-northeast-2.amazonaws.com

concurrency:
  group: fastapi-prod
  cancel-in-progress: true

jobs:
  build-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::471583395947:role/ECRPushRole
          aws-region: ${{ env.AWS_REGION }}

      - uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver: docker-container

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: ./project
          file: ./project/Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:sha-${{ github.sha }}
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:prod
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-push
    runs-on: ubuntu-latest
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::471583395947:role/EC2DeployRole
          aws-region: ${{ env.AWS_REGION }}

      - name: SSM deploy fastapi
        id: ssm
        run: |
          CID=$(aws ssm send-command \
            --region "${{ env.AWS_REGION }}" \
            --instance-ids "${{ env.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --timeout-seconds 7200 \
            --query 'Command.CommandId' --output text \
            --parameters '{"commands":["sudo /opt/tuddy/deploy_tuddy.sh fastapi"]}')
          echo "cid=$CID" >> "$GITHUB_OUTPUT"

      - name: Wait SSM completion (long image pull safe)
        run: |
          for i in {1..180}; do   # 최대 60분(20초*180)
            S=$(aws ssm get-command-invocation \
                  --region "${{ env.AWS_REGION }}" \
                  --command-id "${{ steps.ssm.outputs.cid }}" \
                  --instance-id "${{ env.EC2_INSTANCE_ID }}" \
                  --query Status --output text || true)
            echo "status=$S"
            if [ "$S" = "Success" ]; then
              aws ssm get-command-invocation \
                --region "${{ env.AWS_REGION }}" \
                --command-id "${{ steps.ssm.outputs.cid }}" \
                --instance-id "${{ env.EC2_INSTANCE_ID }}" \
                --query '{Status:Status,Out:StandardOutputContent,Err:StandardErrorContent}'
              exit 0
            fi
            if [[ "$S" =~ (Cancelled|Failed|TimedOut) ]]; then
              aws ssm get-command-invocation \
                --region "${{ env.AWS_REGION }}" \
                --command-id "${{ steps.ssm.outputs.cid }}" \
                --instance-id "${{ env.EC2_INSTANCE_ID }}" \
                --query '{Status:Status,Out:StandardOutputContent,Err:StandardErrorContent}'
              exit 1
            fi
            sleep 20
          done
          echo "Timeout waiting for SSM"; exit 1
          
